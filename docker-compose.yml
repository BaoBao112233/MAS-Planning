# MAS-Planning Multi-Agent System Docker Compose Configuration
# Complete deployment setup for development and production environments

services:
  # Main MAS-Planning Application
  mas-planning:
    build:
      context: .
      dockerfile: ${DOCKERFILE:-Dockerfile}
    container_name: ${CONTAINER_NAME:-mas-planning-app}
    restart: unless-stopped

    ports:
      - "${HOST_PORT:-9000}:9000"

    environment:
      # Application settings
      - API_VERSION=${API_VERSION:-v1}
      - APP_NAME=${APP_NAME:-MAS Planning System}
      - APP_DESC=${APP_DESC:-Multi-Agent Smart Home Planning System}
      - APP_PORT=9000
      
      # Python environment
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      
      # Vertex AI settings
      - MODEL_NAME=${MODEL_NAME:-gemini-2.5-pro}
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}
      - GOOGLE_CLOUD_LOCATION=${GOOGLE_CLOUD_LOCATION:-us-east1}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/service-account.json
      
      # Redis settings (for conversation history)
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=${REDIS_DB:-0}
      - TTL_SECONDS=${TTL_SECONDS:-3600}
      
      # MCP Server settings
      - MCP_SERVER_URL=${MCP_SERVER_URL:-http://host.docker.internal:9031/sse}
      - PLANNER_API_BASE_URL=${PLANNER_API_BASE_URL:-http://host.docker.internal:8000}
      
      # Multi-Agent System settings
      - MAX_TURNS=${MAX_TURNS:-20}
      - MAX_MSG=${MAX_MSG:-12}
      - LIMIT_MINUTES=${LIMIT_MINUTES:-10}
      - DEBUG_MODE=${DEBUG_MODE:-false}

    volumes:
      # For development hot-reload (comment out for production)
      - ./:/app
      # Service account for Google Cloud authentication
      - ./service-account.json:/app/service-account.json:ro
      # Logs and data persistence
      - ${LOG_VOLUME:-./logs}:/app/logs
      - ./data:/app/data

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    depends_on:
      - redis

    networks:
      - mas-network

    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILE:-5}"

    # Resource limits (adjust based on your server capacity)
    deploy:
      resources:
        limits:
          cpus: '${CPU_LIMIT:-2.0}'
          memory: ${MEMORY_LIMIT:-2G}
        reservations:
          cpus: '${CPU_RESERVATION:-1.0}'
          memory: ${MEMORY_RESERVATION:-1G}

  # Redis Cache Service (for conversation history)
  redis:
    image: redis:7-alpine
    container_name: mas-redis-cache
    restart: unless-stopped

    ports:
      - "${REDIS_PORT:-6379}:6379"

    volumes:
      - redis_data:/data

    command: ["redis-server", "--appendonly", "yes", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru"]

    networks:
      - mas-network

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3


# Network configuration
networks:
  mas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

# Volumes for persistent storage
volumes:
  redis_data:
    driver: local
  mas_logs:
    driver: local
